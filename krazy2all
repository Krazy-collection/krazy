#!/usr/bin/perl -w

###############################################################################
# Runs krazy over the KDE source code                                         #
# Copyright 2006-2007 by Allen Winter <winter@kde.org>                        #
#                                                                             #
# This program is free software; you can redistribute it and/or modify        #
# it under the terms of the GNU General Public License as published by        #
# the Free Software Foundation; either version 2 of the License, or           #
# (at your option) any later version.                                         #
#                                                                             #
# This program is distributed in the hope that it will be useful,             #
# but WITHOUT ANY WARRANTY; without even the implied warranty of              #
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the                #
# GNU General Public License for more details.                                #
#                                                                             #
# You should have received a copy of the GNU General Public License along     #
# with this program; if not, write to the Free Software Foundation, Inc.,     #
# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.               #
#                                                                             #
###############################################################################

use strict;
use Getopt::Long;

my ($Prog) = 'krazyall';
my
 $VERSION = '2.0';    #split line so MakeMaker can find the version here

my ($help)     = '';
my ($version)  = '';
my ($verbose)  = '';
my ($ignorerc) = '';
my ($dryrun)   = '';
my ($quiet)    = '';
my ($check)    = '';
my ($exclude)  = '';
my ($extra)    = '';
my ($export)   = 'text';
my ($cms)      = '';

exit 1
  if ( !GetOptions(
		   'help'      => \$help,
		   'version'   => \$version,
		   'dry-run'   => \$dryrun,
		   'ignorerc'  => \$ignorerc,
		   'verbose'   => \$verbose,
		   'quiet'     => \$quiet,
		   'check=s'   => \$check,
		   'exclude=s' => \$exclude,
		   'extra=s'   => \$extra,
		   'export=s'  => \$export,
		   'cms=s'     => \$cms
		  )
     );

&Help()    if ($help);
&Version() if ($version);

if ($export) {
  $export = lc($export);
  if ( ( $export ne "text" ) &&
    ( $export ne "textlist" ) &&
    ( $export ne "textedit" ) &&
    ( $export ne "ebn" ) &&
    ( $export ne "ebnlxr" ) &&
    ( $export ne "html" ) &&
    ( $export ne "htmllxr" ) ) {
    print "Unsupported export type \"$export\"... exiting\n";
    exit 1;
  }
}

# Options to pass to the checker programs
my ($opts) = "";
$opts .= "--dry-run "          if ($dryrun);
$opts .= "--ignorerc "         if ($ignorerc);
$opts .= "--quiet "            if ($quiet);
$opts .= "--verbose "          if ($verbose);
$opts .= "--check=$check "     if ($check);
$opts .= "--exclude=$exclude " if ($exclude);
$opts .= "--extra=$extra "     if ($extra);
$opts .= "--export=$export "   if ($export);
$opts .= "--cms=$cms "         if ($cms);
$opts .= "--explain"           if ( $export ne "textlist" );

system(
"find . -name '*.cpp' -o -name '*.cc' -o -name '*.c' -o -name '*.h' -o -name '*.cxx' -o -name '*.hxx' -o -name '*.ui' -o -name '*.desktop' | xargs krazy2 $opts"
);

exit 0;

# Help function: print help message and exit.
sub Help {
  &Version();
  print "Run krazy on all the source in the current working directory\n\n";
  print "Usage: $Prog [OPTION]\n";
  print "  --help    display help message and exit\n";
  print "  --version display version information and exit\n";
  print "  --check <prog[,prog1,prog2,...,progN]>\n";
  print "            run the specified sanity checker program(s) only\n";
  print "  --exclude <prog[,prog1,prog2,...,progN]>\n";
  print "            do NOT run the specified checker program(s)\n";
  print "  --extra <prog[,prog1,prog2,...,progN]>:\n";
  print "         add the specified \"extra\" program(s) to the checker list\n";
  print "  --export <text|textlist|textedit|ebn|ebnlxr|html|htmllxr>\n";
  print "            output in one of the following formats:\n";
  print "              text (default)\n";
  print "              textlist -> plain old text, 1 offending file-per-line\n";
  print "              textedit -> text formatted for IDEs, 1 issue-per-line\n";
  print "              ebn -> English Breakfast Network style\n";
  print "              ebnlxr -> English Breakfast Network style,\n";
  print "                        with links to lxr.kde.org\n";
  print "              html -> plain old html\n";
  print "              htmllxr -> plain old html,\n";
  print "                         with links to lxr.kde.org\n";
  print "  --cms     component/module/subdir triple for html and ebn exports\n";
  print "  --ignorerc: ignore .krazy files\n";
  print "  --dry-run don't execute the checks; only show what would be run\n";
  print "  --quiet   suppress all output messages\n";
  print "  --verbose print the offending content for each file processed\n";
  print "\n";
  exit 0 if $help;
}

# Version function: print the version number and exit.
sub Version {
  print "$Prog, version $VERSION\n";
  exit 0 if $version;
}

__END__

#==============================================================================

=head1 NAME

krazy2all - Sanity checks KDE source code.

=head1 SYNOPSIS

krazy2all [options]

=head1 DESCRIPTION

krazy2all finds all supported files within the current directory tree
and runs the krazy2 checker on all of them, producing 1 concise report
in the specified export format.

=head1 OPTIONS

=over 4

=item B<--help>

Print help message and exit.

=item B<--version>

Print version information and exit.

=item B<--ignorerc>

Ignore .krazy files.

=item B<--dry-run>

With this option the checker programs aren't run; instead, the command line
for each check that would be run is printed.

=item B<--check> <prog[,prog1,prog2,...,progN]>

Run the specified checker program(s) only.

=item B<--exclude> <prog[,prog1,prog2,...,progN]>

Do B<NOT> run the specified checker program(s).

=item B<--extra> <prog[,prog1,prog2,...,progN]>

Add the specified "extra" program(s) to the list of checkers to run.
Use the --list option to show the list of available "extra" checkers; they
will be marked with the tag [EXTRA] by the checker description line.

=item B<--export> <text|textlist|textedit|ebn|ebnlxr|html|htmllxr>

Output in one of the following formats:
     text (default)
     textlist -> plain old text, 1 offending file-per-line
     textedit -> text formatted for IDEs, 1 issue-per-line (file:line:issue)
     ebn -> English Breakfast Network style
     ebnlxr -> English Breakfast Network style, with links to lxr.kde.org
     html -> plain old html
     htmllxr -> plain old html, with links to lxr.kde.org

=item B<--cms>

An acronym for "component/module/subdir".  Used to write the breadcrumbs line
in the ebn and html export.  Must be a slash-delimited triple containing the
component, module, and subdir which is being scanned.

=item B<--quiet>

Suppress all output messages.

=item B<--verbose>

Print the offending content for each file processed

=back

=head1 ENVIRONMENT

KRAZY_PLUGIN_PATH - this is a colon-separated list of paths which is
searched when locating plugins. By default, plugins are searched for in
the path F<$TOP/libexec/krazy-plugins:krazy-plugins>.

KRAZY_EXTRA_PATH - this is a colon-separated list of paths which is
searched when locating "extra" plugins. By default, the "extras" are searched
for in the path F<$TOP/libexec/krazy-extras:krazy-extras>.

where $TOP is the top-level installation directory (eg. F</usr/local>, F</usr/local/Krazy2>)

=head1 EXIT STATUS

In normal operation, krazy2all exits with a status 0.

If a command line option was incorrectly provided, krazy2all exits with
status=1.

If krazy2all was envoked with the B<--help>, B<--version>, or B<--list>
options it will exit with status=0.

=head1 COPYRIGHT

Copyright (c) 2005-2007 by Allen Winter <winter@kde.org>

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

=head1 FILES

F<.krazy> (see krazyrc(5))

krazy2all looks up the current working directory tree for a F<.krazy> file
in the project subdirectory.  Only F<.krazy> files found at the project
subdirectory level are read.

For example, if the current working dir is
F</my/kde/trunk/KDE/kdepimlibs/kcal/versit>, then krazy2all will look for
F</my/kde/trunk/KDE/kdepimlibs/kcal/.krazy>, since kcal is the project
within the kdepimlibs module.

If the current working dir is not within a KDE module, or if the current
working dir is above a project subdir, then a F<.krazy> file will not be read.


=head1 SEE ALSO

krazyrc(5), krazy2(1), krazy2ebn(1)

=head1 AUTHORS

Allen Winter, <winter@kde.org>

=cut
