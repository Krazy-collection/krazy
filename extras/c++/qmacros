#!/usr/bin/perl -w

eval 'exec /usr/bin/perl -w -S $0 ${1+"$@"}'
    if 0; # not running under some shell
###############################################################################
# Sanity check plugin for the Krazy project.                                  #
# Copyright (C) 2012-2019 by Allen Winter <winter@kde.org>                    #
#                                                                             #
# This program is free software; you can redistribute it and/or modify        #
# it under the terms of the GNU General Public License as published by        #
# the Free Software Foundation; either version 2 of the License, or           #
# (at your option) any later version.                                         #
#                                                                             #
# This program is distributed in the hope that it will be useful,             #
# but WITHOUT ANY WARRANTY; without even the implied warranty of              #
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the                #
# GNU General Public License for more details.                                #
#                                                                             #
# You should have received a copy of the GNU General Public License along     #
# with this program; if not, write to the Free Software Foundation, Inc.,     #
# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.               #
#                                                                             #
###############################################################################

# Tests source for not using Qt Macros

# Program options:
#   --help:          print one-line help message and exit
#   --version:       print one-line version information and exit
#   --priority:      report issues of the specified priority only
#   --strict:        report issues with the specified strictness level only
#   --explain:       print an explanation with solving instructions
#   --installed      file is to be installed
#   --quiet:         suppress all output messages
#   --verbose:       print the offending content

# Exits with status=0 if test condition is not present in the source;
# else exits with the number of failures encountered.

use strict;
use Cwd 'abs_path';
use FindBin qw($Bin);
use lib "$Bin/../../../../lib";
use Krazy::PreProcess;
use Krazy::Utils;

my($Prog) = "qmacros";
my($Version) = "0.92";

&parseArgs();

&Help() if &helpArg();
&Version() if &versionArg();
&Explain() if &explainArg();
if ($#ARGV != 0){ &Help(); Exit 0; }

my($f) = $ARGV[0];
my($absf) = abs_path($f);

# open file and slurp it in
if (&fileType($f) eq "c++") {
  open(F, "$f") || die "Couldn't open $f";
} else {
  print "okay\n" if (!&quietArg());
  Exit 0;
}
my(@data_lines) = <F>;
close(F);

# Remove C-style comments and #if 0 blocks from the file input
my(@lines) = RemoveIfZeroBlockC( RemoveCommentsC( @data_lines ) );
# Remove Krazy conditional blocks
@lines = RemoveCondBlockC( $Prog, @lines );

my($cnt) = 0;
my($linecnt) = 0;
my($lstr) = "";

my(%G);
my($line);
while ($linecnt < $#lines) {
  $line = $lines[$linecnt++];
  if ($line =~ m+//.*[Kk]razy:excludeall=.*$Prog+ ||
      $line =~ m+//.*[Kk]razy:skip+) {
    $cnt = 0;
    last;
  }
  next if ($line =~ m+//.*[Kk]razy:exclude=.*$Prog+);
  $line =~ s+//.*++;  #skip C++ comments

  $cnt += &doIt($line,'^\s*foreach\s*\(',"foreach");
  $cnt += &doIt($line,'[;,]\s*assert\s*\(',"assert");
  $cnt += &doIt($line,'^\s*assert\s*\(',"assert");
  $cnt += &doIt($line,'[;,]\s*emit\s',"emit");
  $cnt += &doIt($line,'^\s*emit\s',"emit");
}

if (!$cnt) {
  print "okay\n" if (!&quietArg());
  Exit 0;
} else {
  my($g);
  foreach $g ( keys %G ) {
    my($tcnt) = $G{$g}{'cnt'};
    my($tlstr) = '';
    if ( $tcnt > 0 ) {
      $tlstr = $G{$g}{'lstr'};
      $tlstr =~ s/,$//;
      print "$tlstr [$g] ($tcnt)\n" if (!&quietArg());
    }
  }
  Exit $cnt;
}

sub doIt() {
  my($line,$funre,$n) = @_;
  if (!defined($G{$n})){
    $G{$n}{'cnt'} = 0;
    $G{$n}{'lstr'} = '';
  }
  if (&func($line,$funre)) {
    $G{$n}{'cnt'}++;
    if ($G{$n}{'cnt'} == 1 ) {
      $G{$n}{'lstr'} = "line\#" . $linecnt;
    } else {
      $G{$n}{'lstr'} = $G{$n}{'lstr'} . "," . $linecnt;
    }
    print "=> $line\n" if (&verboseArg());
    return 1;
  }
  return 0;
}

sub func() {
  my($l,$fun) = @_;
  if ($l =~ m/$fun/) {
    return 1;
  } else {
    return 0;
  }
}

sub Help {
  print "Check for Qt macros that should be used\n";
  Exit 0 if &helpArg();
}

sub Version {
  print "$Prog, version $Version\n";
  Exit 0 if &versionArg();
}

sub Explain {
  print "For Qt based C++ code use macros like Q_FOREACH, Q_ASSERT, Q_ASSERT_X, Q_EMIT instead of their non-Qt counterparts (foreach, assert, emit,...).\n";
  Exit 0 if &explainArg();
}
