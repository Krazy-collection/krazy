#!/usr/bin/perl -w

eval 'exec /usr/bin/perl -w -S $0 ${1+"$@"}'
    if 0; # not running under some shell
###############################################################################
# Sanity check plugin for the Krazy project.                                  #
# Copyright (C) 2009-2020 by Allen Winter <winter@kde.org>                    #
#                                                                             #
# This program is free software; you can redistribute it and/or modify        #
# it under the terms of the GNU General Public License as published by        #
# the Free Software Foundation; either version 2 of the License, or           #
# (at your option) any later version.                                         #
#                                                                             #
# This program is distributed in the hope that it will be useful,             #
# but WITHOUT ANY WARRANTY; without even the implied warranty of              #
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the                #
# GNU General Public License for more details.                                #
#                                                                             #
# You should have received a copy of the GNU General Public License along     #
# with this program; if not, write to the Free Software Foundation, Inc.,     #
# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.               #
#                                                                             #
###############################################################################

# Tests C++ source for includes that could be replaced by CamelCase headers.

# Program options:
#   --help:          print one-line help message and exit
#   --version:       print one-line version information and exit
#   --priority:      report issues of the specified priority only
#   --strict:        report issues with the specified strictness level only
#   --explain:       print an explanation with solving instructions
#   --installed      file is to be installed
#   --quiet:         suppress all output messages
#   --verbose:       print the offending content

# Exits with status=0 if test condition is not present in the source;
# else exits with the number of failures encountered.

use strict;
use Cwd 'abs_path';
use FindBin qw($Bin);
use lib "$Bin/../../../../lib";
use Krazy::PreProcess;
use Krazy::Utils;

my($Prog) = "camelcase";
my($Version) = "1.72";

&parseArgs();

&Help() if &helpArg();
&Version() if &versionArg();
&Explain() if &explainArg();
if ($#ARGV != 0){ &Help(); Exit 0; }

my($f) = $ARGV[0];

# open file and slurp it in (C++ only)
if (&fileTypeIs($f, "c++")) {
  open(F, "$f") || die "Couldn't open $f";
} else {
  print "okay\n" if (!&quietArg());
  Exit 0;
}
my(@data_lines) = <F>;
close(F);

# Remove C-style comments and #if 0 blocks from the file input
my(@lines) = RemoveIfZeroBlockC( RemoveCommentsC( @data_lines ) );
# Remove Krazy conditional blocks
@lines = RemoveCondBlockC( $Prog, @lines );

my($cnt) = 0;
my($linecnt) = 0;
my($lstr) = "";

my($sep,$incpath);
my($line);
while ($linecnt < $#lines) {
  $line = $lines[$linecnt++];
  if ($line =~ m+//.*[Kk]razy:excludeall=.*$Prog+ ||
      $line =~ m+//.*[Kk]razy:skip+) {
    $cnt = 0;
    last;
  }
  next if ($line =~ m+//.*[Kk]razy:exclude=.*$Prog+);
  $line =~ s+//.*++;  #skip C++ comments

  # get the include path, if there is one
  if ($line =~ m+^[[:space:]]*#include[[:space:]]+) {
    if ($line =~ m+\"+ ) {
      $sep = "\"";
      $incpath = &incPath($line);
    } else {
      $sep = "<";
      $incpath = &incAnglePath($line);
    }
    next if ($sep eq "\"");
    next if ($incpath =~ m/\.inc$/); #skip foo.inc
#    next if ($incpath =~ m:^(lib|kd)\w+/:);
    next if ($incpath =~ m:^(phonon|boost|grantlee|kolab|qgpgme|gpgme\+\+)/:);
    next if (&isCamelCase($incpath));
    next if ($sep eq "<" && $incpath =~ m/^(c|io)/ && $incpath !~ m/\.h$/);
    next if ($sep eq "<" && $incpath =~ m/^config/ && $incpath =~ m/\.h$/);
    next if ($sep eq "<" && $incpath =~ m+^(k3|q3|ical|libical|uuid|uni|os|ieee|gmp|graphviz|vtk|qjson|std|if|sys/|net|netinet/|arpa|mach/|phonenumbers/|tr1/|xcb/)+);
    next if ($sep eq "<" && $incpath =~ m/^(algorithm|functional|iterator|limits|map|memory|set|vector|string|exception|deque)|queue|numeric|unordered_map|sstream/);
    next if ($sep eq "<" && $incpath =~ m/^(calendarsupport|calendarviews|incidenceeditor|akonadi_next)/);
    next if ($sep eq "<" && $incpath =~ m/^(messagecomposer|messagecore|messagelist|messageviewer|ontologies)/);
    next if ($sep eq "<" && $incpath =~ m+^private/q.*_p.h$+);
    next if ($sep eq "<" && $incpath =~ m+keychain/keychain.h$+);
    next if ($incpath =~ m/version/);
    next if ($incpath eq "kdemacros.h" || $incpath eq "qtest_kde.h" ||
             $incpath eq "fixx11h.h" || $incpath eq "qx11info_x11.h");
    next if ($incpath eq "qglobal.h" ||
             $incpath eq "qwindowdefs.h" ||
             $incpath eq "qmath.h" ||
             $incpath eq "qendian.h" ||
             $incpath eq "qopengl.h" ||
             $incpath eq "qqml.h" ||
             $incpath eq "qqmldebug.h" ||
             $incpath eq "qcompilerdetection.h");
    next if ($incpath eq "kvm.h" ||
             $incpath eq "pwd.h" ||
             $incpath eq "dlfcn.h" ||
             $incpath eq "windows.h" ||
             $incpath eq "winuser.h" ||
             $incpath eq "wincrypt.h" ||
             $incpath eq "winsock2.h" ||
             $incpath eq "ctype.h" ||
             $incpath eq "inttypes.h" ||
             $incpath eq "jni.h" ||
             $incpath eq "getopt.h" ||
             $incpath eq "err.h" ||
             $incpath eq "elf.h" ||
             $incpath eq "execinfo.h" ||
             $incpath eq "cxxabi.h" ||
             $incpath eq "io.h");
    next if ($incpath =~ m+mach-o/.*.h$+); #Mac specific
    $cnt++;
    if ($cnt == 1) {
      $lstr = "line\#" . $linecnt;
    } else {
      $lstr = $lstr . "," . $linecnt;
    }
    print "=> $line\n" if (&verboseArg());
  }
}
close(F);

if (!$cnt) {
  print "okay\n" if (!&quietArg());
  Exit 0;
} else {
  print "$lstr ($cnt)\n" if (!&quietArg());
  Exit $cnt;
}

sub incPath {
  my($in) = @_;
  my($fred);
  $in =~ s+^\s*#\s*include[[:space:]]++;
  ($fred,$in) = split('"',$in);
  return $in;
}

sub incAnglePath {
  my($in) = @_;
  $in =~ s+^\s*#\s*include[[:space:]]++;
  $in =~ s+<++; $in =~ s+>\s*++;
  return $in;
}

sub isCamelCase {
  my($in) = @_;
  if ($in =~ m:^[A-Z]{1,2}\w+[A-Z]{1}: ||
      $in =~ m:^[A-Z]{1,2}\w+/*:) {
    return 1;
  } else {
    return 0;
  }
}

sub Help {
  print "Check for not using CamelCase headers\n";
  Exit 0 if &helpArg();
}

sub Version {
  print "$Prog, version $Version\n";
  Exit 0 if &versionArg();
}

sub Explain {
  print "Some libraries, like Qt and KDE frameworks provide CamelCase, class-based headers.\n";
  Exit 0 if &explainArg();
}
