#!/usr/bin/perl -w

eval 'exec /usr/bin/perl -w -S $0 ${1+"$@"}'
    if 0; # not running under some shell
###############################################################################
# Sanity check plugin for the Krazy project.                                  #
# Copyright (C) 2013 by Allen Winter <winter@kde.org>                         #
#                                                                             #
# This program is free software; you can redistribute it and/or modify        #
# it under the terms of the GNU General Public License as published by        #
# the Free Software Foundation; either version 2 of the License, or           #
# (at your option) any later version.                                         #
#                                                                             #
# This program is distributed in the hope that it will be useful,             #
# but WITHOUT ANY WARRANTY; without even the implied warranty of              #
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the                #
# GNU General Public License for more details.                                #
#                                                                             #
# You should have received a copy of the GNU General Public License along     #
# with this program; if not, write to the Free Software Foundation, Inc.,     #
# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.               #
#                                                                             #
###############################################################################

# Tests Python (PyQt) code for emitting scalar values as 2-tuples to Qt SIGNALs.

# Program options:
#   --help:          print one-line help message and exit
#   --version:       print one-line version information and exit
#   --priority:      report issues of the specified priority only
#   --strict:        report issues with the specified strictness level only
#   --explain:       print an explanation with solving instructions
#   --installed      file is to be installed
#   --quiet:         suppress all output messages
#   --verbose:       print the offending content

# Exits with status=0 if test condition is not present in the source;
# else exits with the number of failures encountered.

use strict;
use FindBin qw($Bin);
use lib "$Bin/../../../../lib";
use Krazy::PreProcess;
use Krazy::Utils;

my($Prog) = "qtemits";
my($Version) = "1.0";

&parseArgs();

&Help() if &helpArg();
&Version() if &versionArg();
&Explain() if &explainArg();
if ($#ARGV != 0){ &Help(); Exit 0; }

my($f) = $ARGV[0];

# open file and slurp it in (Python only)
if (&fileType($f) eq "python") {
  open(F, "$f") || die "Couldn't open $f";
} else {
  print "okay\n" if (!&quietArg());
  Exit 0;
}
my(@lines) = <F>;
close(F);

# Check Condition
my($cnt) = 0;
my($linecnt) = 0;
my($line);
my($lstr) = "";

while ($linecnt <= $#lines) {
  $line = $lines[$linecnt++];

  if ($line =~ m+#.*[Kk]razy:excludeall=.*$Prog+ ||
      $line =~ m+#.*[Kk]razy:skip+) {
    $cnt = 0;
    last;
  }

  next if ($line =~ m+#.*[Kk]razy:exclude=.*$Prog+);

  if ($line =~ m/\.emit\s*\(\s*.*SIGNAL\s*\(/) {
    # if line is continued, look skip ahead 1 line
    if ($line !~ m/\)\s*$/ ) {
      $line  = $lines[$linecnt++];
    }
    # search for empty last value of n-tuple
    if ($line =~ m/,\s*\)\s*\)\s*$/) {
      $cnt++;
      if ($cnt == 1) {
	$lstr = "line\#" . $linecnt;
      } else {
	$lstr = $lstr . "," . $linecnt;
      }
      print "=> $line\n" if (&verboseArg());
    }
  }

  if ($line =~ m/\.emit\s*\(\s*$/) {
    $line  = $lines[$linecnt++];
    if ($line =~ m/.*SIGNAL\s*\(/) {
      # if line is continued, look skip ahead 1 line
      if ($line !~ m/\)\s*$/ ) {
	$line  = $lines[$linecnt++];
      }
      # search for empty last value of n-tuple
      if ($line =~ m/,\s*\)\s*\)\s*$/) {
	$cnt++;
	if ($cnt == 1) {
	  $lstr = "line\#" . $linecnt;
	} else {
	  $lstr = $lstr . "," . $linecnt;
	}
	print "=> $line\n" if (&verboseArg());
      }
    }
  }
}
close(F);

if (!$cnt) {
  print "okay\n" if (!&quietArg());
  Exit 0;
} else {
  print "$lstr ($cnt)\n" if (!&quietArg());
  Exit $cnt;
}

sub Help {
  print "Check for problems with Qt emits in Python code\n";
  Exit 0 if &helpArg();
}

sub Version {
  print "$Prog, version $Version\n";
  Exit 0 if &versionArg();
}

sub Explain {
  print "Older versions of PyQt required all the values emitted to a Qt SIGNAL to be an n-tuple.  New PyQt (starting with PyQt4) require that 1-tuple values be emitted as scalars.\n";
  Exit 0 if &explainArg();
}
