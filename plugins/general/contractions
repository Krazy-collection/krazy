#!/usr/bin/perl -w

eval 'exec /usr/bin/perl -w -S $0 ${1+"$@"}'
    if 0; # not running under some shell
###############################################################################
# Sanity check plugin for the Krazy project.                                  #
# Copyright (C) 2006-2007 by Allen Winter <winter@kde.org>                    #
#                                                                             #
# This program is free software; you can redistribute it and/or modify        #
# it under the terms of the GNU General Public License as published by        #
# the Free Software Foundation; either version 2 of the License, or           #
# (at your option) any later version.                                         #
#                                                                             #
# This program is distributed in the hope that it will be useful,             #
# but WITHOUT ANY WARRANTY; without even the implied warranty of              #
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the                #
# GNU General Public License for more details.                                #
#                                                                             #
# You should have received a copy of the GNU General Public License along     #
# with this program; if not, write to the Free Software Foundation, Inc.,     #
# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.               #
#                                                                             #
###############################################################################

# Tests KDE source for English contractions.

# Program options:
#   --help:          print one-line help message and exit
#   --version:       print one-line version information and exit
#   --explain:       print an explanation with solving instructions, then exit
#   --installed      file is to be installed
#   --quiet:         suppress all output messages
#   --verbose:       print the offending content

# Exits with status=0 if test condition is not present in the source;
# else exits with the number of failures encountered.

use strict;
use Getopt::Long;
use FindBin qw($Bin);
use lib "$Bin/../../../lib";
use Krazy::PreProcess;

my($Prog) = "contractions";
my($Version) = "1.2";

my($help) = '';
my($version) = '';
my($explain) = '';
my($installed) = '';
my($quiet) = '';
my($verbose) = '';

exit 1
if (!GetOptions('help' => \$help, 'version' => \$version,
                'explain' => \$explain, 'installed' => \$installed,
                'verbose' => \$verbose, 'quiet' => \$quiet));

&Help() if $help;
&Version() if $version;
&Explain() if $explain;
if ($#ARGV != 0){ &Help(); exit 0; }

my($f) = $ARGV[0];

# open file and slurp it in
open(F, "$f") || die "Couldn't open $f";
my(@data_lines) = <F>;
close(F);

# Remove comments from the file input
my(@lines);
if ($f =~ m/\.desktop$/) {
  @lines = RemoveCommentsFDO( @data_lines );
} elsif ($f =~ m/\.cpp$/ || $f =~ m/\.cc$/ || $f =~ m/\.cxx$/ || $f =~ m/\.c$/ ||
	 $f =~ m/\.h$/ || $f =~ m/\.hxx$/) {
  # also remove #if 0 blocks from C/C++ source
  @lines = RemoveIfZeroBlockC( RemoveCommentsC( @data_lines ) );
} else {
  @lines = @data_lines;
}

my($cnt) = 0;
my($linecnt) = 0;
my($line);
my($lstr) = "";
foreach $line (@lines) {
  if ($line =~ m+[Kk]razy:excludeall=.*$Prog+ ||
      $line =~ m+[Kk]razy:skip+) {
    $cnt = 0;
    last;
  }
  $linecnt++;
  next if ($line =~ m+[Kk]razy:exclude=.*$Prog+);

  $line =~ s+//.*++;  #skip C++ comments

  for my $word ( split /[^\w']/,$line ) {  # \W would split on apostrophe
    my $lw = lc($word);
    if ($lw eq "aren't" ||
        $lw eq "can't" ||
        $lw eq "couldn't" ||
        $lw eq "didn't" ||
        $lw eq "doesn't" ||
        $lw eq "don't" ||
        $lw eq "hadn't" ||
        $lw eq "hasn't" ||
        $lw eq "haven't" ||
        $lw eq "he'd" ||
        $lw eq "he's" ||
        $lw eq "i'd" ||
        $lw eq "i'm" ||
        $lw eq "it'd" ||
        $lw eq "it's" ||
        $lw eq "i've" ||
        $lw eq "isn't" ||
        $lw eq "she'd" ||
        $lw eq "she's" ||
        $lw eq "shouldn't" ||
        $lw eq "they'd" ||
        $lw eq "they're" ||
        $lw eq "they've" ||
        $lw eq "wasn't" ||
        $lw eq "we'd" ||
        $lw eq "we'll" ||
        $lw eq "we're" ||
        $lw eq "weren't" ||
        $lw eq "we've" ||
        $lw eq "won't" ||
        $lw eq "wouldn't" ||
        $lw eq "you'd" ||
        $lw eq "you're" ||
        $lw eq "you've") {
      $cnt++;
      if ($cnt == 1) {
        $lstr = "line\#" . $linecnt . "[$word]";
      } else {
        $lstr = $lstr . "," . $linecnt . "[$word]";
      }
      print "=> $line" if ($verbose);
    }
  }
}

if (!$cnt) {
  print "okay\n" if (!$quiet);
  exit 0;
} else {
  print "$lstr ($cnt)\n" if (!$quiet);
  exit $cnt;
}

sub Help {
  print "Check for contractions in strings\n";
  exit 0 if $help;
}

sub Version {
  print "$Prog, version $Version\n";
  exit 0 if $version;
}

sub Explain {
  print "Contractions in strings are sometimes hard to translate so do not use them.  For example: \"don't\" should be changed to \"do not\".  Contractions used in comments are ok.\n";
  exit 0 if $explain;
}
