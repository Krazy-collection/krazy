#!/usr/bin/perl -w

eval 'exec /usr/bin/perl -w -S $0 ${1+"$@"}'
    if 0; # not running under some shell
###############################################################################
# Sanity check plugin for the Krazy project.                                  #
# Copyright (C) 2007 by Allen Winter <winter@kde.org>                         #
#                                                                             #
# This program is free software; you can redistribute it and/or modify        #
# it under the terms of the GNU General Public License as published by        #
# the Free Software Foundation; either version 2 of the License, or           #
# (at your option) any later version.                                         #
#                                                                             #
# This program is distributed in the hope that it will be useful,             #
# but WITHOUT ANY WARRANTY; without even the implied warranty of              #
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the                #
# GNU General Public License for more details.                                #
#                                                                             #
# You should have received a copy of the GNU General Public License along     #
# with this program; if not, write to the Free Software Foundation, Inc.,     #
# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.               #
#                                                                             #
###############################################################################

# Tests KDE source for prohibited Qt Classes

# Program options:
#   --help:          print one-line help message and exit
#   --version:       print one-line version information and exit
#   --explain:       print an explanation with solving instructions, then exit
#   --installed      file is to be installed
#   --quiet:         suppress all output messages
#   --verbose:       print the offending content

# Exits with status=0 if test condition is not present in the source;
# else exits with the number of failures encountered.

use strict;
use Getopt::Long;
use Cwd 'abs_path';

my($Prog) = "qclasses";
my($Version) = "1.2";

my($help) = '';
my($version) = '';
my($explain) = '';
my($installed) = '';
my($quiet) = '';
my($verbose) = '';

exit 1
if (!GetOptions('help' => \$help, 'version' => \$version,
                'explain' => \$explain, 'installed' => \$installed,
                'verbose' => \$verbose, 'quiet' => \$quiet));

&Help() if $help;
&Version() if $version;
&Explain() if $explain;
if ($#ARGV != 0){ &Help(); exit 0; }

my($f) = $ARGV[0];
my($absf) = abs_path($f);

if ($absf !~ m+/kdesupport/+ &&
    ($f =~ m/\.cpp$/ || $f =~ m/\.cxx$/ || $f =~ m/\.cc$/)) {
  open(F, "$f") || die "Couldn't open $f";
} else {
  print "okay\n" if (!$quiet);
  exit 0;
}

my(@data_lines) = <F>;
close(F);

#get all the c-style comments from the file
my($data)="@data_lines";
my(@comments) = ($data =~ /\/\*.*?\*\//gs);

#for each comment, remove everything but the linebreaks, so
#our line numbering report does not get screwed up.
foreach my $comment ( @comments ) {
        my($fixed_comment) = $comment;
        $fixed_comment =~ s/[^\n]//gs;
        $fixed_comment =~ s/\n/\n/gs;
        $data =~ s/\Q$comment/$fixed_comment/s;
}

#put it back into an array so we can iterate over it
my(@lines) = split(/\n/, $data);


my($cnt) = 0;
my($linecnt) = 0;
my($lstr) = "";

my($line);
while ($linecnt < $#lines) {
  $line = $lines[$linecnt++];
  if ($line =~ m+//.*[Kk]razy:excludeall=.*$Prog+ ||
      $line =~ m+//.*[Kk]razy:skip+) {
    $cnt = 0;
    last;
  }
  &doIt($line,"QColorDialog","KColorDialog");
  &doIt($line,"QComboBox","KComboBox");
  &doIt($line,"QMessageBox","KMessageBox");
  &doIt($line,"QInputDialog","KInputDialog");
  &doIt($line,"QFileDialog","KFileDialog");
  &doIt($line,"QProgressDialog","KProgressDialog");
  &doIt($line,"QSplashScreen","KSplashScreen");
  &doIt($line,"QSystemTrayIcon","KSystemTrayIcon");
  &doIt($line,"QDialog","KDialog");
  &doIt($line,"QLineEdit","KLineEdit");
  &doIt($line,"QTextBrowser","KTextBrowser");
  &doIt($line,"QTextEdit","KTextEdit");
  &doIt($line,"QUrl","KUrl");
}

if (!$cnt) {
  print "okay\n" if (!$quiet);
  exit 0;
} else {
  $lstr =~ s/,$//;
  print "$lstr ($cnt)\n" if (!$quiet);
  exit $cnt;
}

sub doIt() {
  my($line,$qname,$kname) = @_;
  if ($f !~ m/$kname\.c/i && &qClass($line,$qname)) {
    $cnt++;
    $lstr .= $qname . "[$kname],";
    print "=> $line\n" if ($verbose);
  }
}

sub qClass() {
  my($l,$qname) = @_;
  if ($l =~ m/new[[:space:]]$qname[[:space:]]*\(/ ||
      $l =~ m/$qname\::[[:alnum:]]+[[:space:]]*\(/ ||
      (($l =~ m/=[[:space:]]*$qname\::/ || $l =~ m/=[[:space:]]*$qname[[:space:]]*\(/) && ($l !~ m/==/ && $l !~ m/\!=/))) {
    return 1;
  } else {
    return 0;
  }
}

sub Help {
  print "Check for Qt classes that should not be used\n";
  exit 0 if $help;
}

sub Version {
  print "$Prog, version $Version\n";
  exit 0 if $version;
}

sub Explain {
  print "Use the KDE version of some Qt GUI elements to provide a consistent look and feel for the KDE desktop. The KDE classes are not just adding functionalities to the Qt base class and are mostly not even based on the Qt class. *Please* *refer* *to* *the* *API* *documentation* *for* *details* *before* *porting* *to* *the* *K* *classes*.\n";
  exit 0 if $explain;
}
