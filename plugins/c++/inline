#!/usr/bin/perl -w

eval 'exec /usr/bin/perl -w -S $0 ${1+"$@"}'
    if 0; # not running under some shell
###############################################################################
# Sanity check plugin for the Krazy project.                                  #
# Copyright (C) 2006-2008,2011,2014,2016 by Allen Winter <winter@kde.org>     #
#                                                                             #
# This program is free software; you can redistribute it and/or modify        #
# it under the terms of the GNU General Public License as published by        #
# the Free Software Foundation; either version 2 of the License, or           #
# (at your option) any later version.                                         #
#                                                                             #
# This program is distributed in the hope that it will be useful,             #
# but WITHOUT ANY WARRANTY; without even the implied warranty of              #
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the                #
# GNU General Public License for more details.                                #
#                                                                             #
# You should have received a copy of the GNU General Public License along     #
# with this program; if not, write to the Free Software Foundation, Inc.,     #
# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.               #
#                                                                             #
###############################################################################

# Tests C++ source for inline methods in public, exported classes.

# Program options:
#   --help:          print one-line help message and exit
#   --version:       print one-line version information and exit
#   --priority:      report issues of the specified priority only
#   --strict:        report issues with the specified strictness level only
#   --explain:       print an explanation with solving instructions
#   --installed      file is to be installed
#   --quiet:         suppress all output messages
#   --verbose:       print the offending content

# Exits with status=0 if test condition is not present in the source;
# else exits with the number of failures encountered.

use strict;
use FindBin qw($Bin);
use lib "$Bin/../../../../lib";
use Krazy::PreProcess;
use Krazy::Utils;

my($debug) = 0;  #set to go into debug mode
my($Prog) = "inline";
my($Version) = "1.14";

&parseArgs();

&Help() if &helpArg();
&Version() if &versionArg();
&Explain() if &explainArg();
if ($#ARGV != 0){ &Help(); Exit 0; }

my($f) = $ARGV[0];

# open file and slurp it in (headers only)
if (&installedArg() && ($f =~ m/\.h$/ || $f =~ m/\.hxx$/)) {
  open(F, "$f") || die "Couldn't open $f";
} else {
  print "okay\n" if (!&quietArg());
  Exit 0;
}
my(@data_lines) = <F>;
close(F);

# Remove C-style comments and #if 0 blocks from the file input
my(@lines) = RemoveIfZeroBlockC( RemoveCommentsC( @data_lines ) );

my($CNAME) = ""; #current class name
my(@classes) = ();
my(%stuff);
my($cnt) = 0;
my($linecnt) = 0;
my($lstr) = "";
my($inlm) = "";
my($line);
my($lastl)=""; #last line
while ($linecnt < $#lines) {
  $lastl = $line;
  $line = $lines[$linecnt++];
  if ($line =~ m+//.*[Kk]razy:excludeall=.*$Prog+ ||
      $line =~ m+//.*[Kk]razy:skip+) {
    $cnt = 0;
    last;
  }

  $CNAME = &Cname($line,$lastl);
  if ($CNAME ne "") {
    #found a public, exported class

    $stuff{$CNAME}{'dpointer'} = 0;
    $stuff{$CNAME}{'excluded'} = 0;       #is this class krazy excluded?
    $stuff{$CNAME}{'section'} = "private";#default visibility in classes
    $stuff{$CNAME}{'inlines'} = 0;        #count inlines
    $stuff{$CNAME}{'inlineList'} = "";    #list of lines with inlines

    print "CLASS: $CNAME\n" if ($debug);
    while ($linecnt < $#lines) {
      # search for a inline methods
      &Section($line);
      $lastl = $line;
      $line = $lines[$linecnt++];
      if (&Cname($line,$lastl)) { $linecnt--; last; }
      next if (&endClass($line,$linecnt));

      if ($line =~ m/^[[:space:]]*inline[[:space:]]/ || $line =~ m/{/) {
        # we found a possible problem inline method
        $inlm = $line;

        #look for an inline method (that isn't private)
        if (&Inline($inlm,$linecnt) && ($stuff{$CNAME}{'section'} ne "private")) {
          # found an inline method
          $stuff{$CNAME}{'inlines'}++;
          if ($stuff{$CNAME}{'inlines'} == 1) {
            $stuff{$CNAME}{'inlineList'} = $linecnt;
          } else {
            $stuff{$CNAME}{'inlineList'} .= "," . $linecnt;
          }
          print "=> $line\n" if (&verboseArg());
        }
      }
    }
  } else {
    #might find inlines outside of a class definition too
    if ($line =~ m/^[[:space:]]*inline[[:space:]]/ && &Inline($line,$linecnt)) {
      $cnt++;
      if ($cnt == 1) {
        $lstr = "line\#" . $linecnt;
      } else {
        $lstr = $lstr . "," . $linecnt;
      }
      print "=> $line\n" if (&verboseArg());
    }
  }
}

if (!$cnt) {
  print "okay\n" if (!&quietArg());
  Exit 0;
} else {
  print "$lstr ($cnt)\n" if (!&quietArg());
  Exit $cnt;
}

sub Cname {
  my($l,$l1) = @_;
  my($cname)="";
  $l =~ s+//.*++; #strip trailing C++ comment
  return 0 if ($l =~ m/_EXPORT_DEPRECATED/);
  return 0 if ($l =~ m/_TEST_EXPORT/);
  if ($l =~ m+^[[:space:]]*class[[:space:]].*+ && $l !~ m/;\s*$/ && $l !~ m/\\\s*$/) {
    if ($l1 !~ m/template/ && $l1 !~ m/#define[[:space:]]/) {
      $cname = $l;
      $cname =~ s/:.*$//;
      $cname =~ s/{.*$//;
      $cname =~ s/[[:space:]]*class[[:space:]].*EXPORT[[:space:]]//;
      $cname =~ s/[[:space:]]*class[[:space:]]//;
      $cname =~ s/\s+$//;
      if ($l =~ m/_EXPORT/) {
        $stuff{$cname}{'exported'} = 1;
      } else {
        $stuff{$cname}{'exported'} = 0;
      }
      if ($#classes < 0 || $cname ne $classes[$#classes]) {
        push(@classes,$cname);
        print "push $cname, $#classes in stack\n" if ($debug);
      }
    }
  }
  return $cname;
}

# determine if the current line marks the end of a class
sub endClass {
  my($l,$lc) = @_;
  return 0 if ($l !~ m/^[[:space:]]*}[[:space:]]*;/);
  # This is getting ridiculous
  # TODO: do it the other way around: when we get to an opening enum or struct
  #       declaration in a private: section, skip forward to the end
  #       but be wary of things like enum { foo, bar, foobar };
  #       (and nested structs?)
  return 0 if (&searchBackWithStop('^[[:space:]]*struct[[:space:]]',$lc-1,75,
                  '^[[:space:]]*class[[:space:]]|^[[:space:]]*}[[:space:]]*;|^[[:space:]]*struct.*;|^[[:space:]]*private:'));
  # enums don't have semicolons in them;
  # unless, of course, someone puts one at
  # the end of a doxygen line (why would they?)
  return 0 if (&searchBackWithStop('^[[:space:]]*enum[[:space:]]',$lc-1,75,
                  ';[[:space:]]*$|^[[:space:]]*private:'));

  #at end of class
  my($cclass) = $classes[$#classes];
  if ($#classes >= 0) {
    &chkInlines($cclass);
  }
  print "($lc) End Class $cclass ($l)\n" if ($debug);
  pop(@classes);

  if ($#classes >= 0) {
    $CNAME = $classes[$#classes];
    print "pop to class $CNAME, section $stuff{$CNAME}{'section'}, $#classes in stack\n" if ($debug);
  }
  return 1;
}

sub chkInlines {
  my($c) = @_;

  if ($c ne "" && !$stuff{$c}{'excluded'} ) {
    if ($cnt == 0) {
      $lstr = "line\#" . $stuff{$c}{'inlineList'};
    } else {
      $lstr = $lstr . "," . $stuff{$c}{'inlineList'} if ($stuff{$c}{'inlineList'});
    }
    $cnt += $stuff{$c}{'inlines'};
  }
}

sub Section {
  my($l) = @_;
  if ($l =~ m/slots/i) {
    $stuff{$CNAME}{'section'} = "slot";
  } elsif ($l =~ m/signals/i) {
    $stuff{$CNAME}{'section'} = "signal";
  } elsif ($l =~ m/private\s*:/) {
    $stuff{$CNAME}{'section'} = "private";
    print "In private section of $CNAME\n" if ($debug);
  } elsif ($l =~ m/public/) {
    $stuff{$CNAME}{'section'} = "public";
  } elsif ($l =~ m/protected/) {
    $stuff{$CNAME}{'section'} = "protected";
  }
}

# determine if the current line $l has an inline method
sub Inline {
  my($l,$lc) = @_;

  #check the line $l for conditions where inline is ok within a class
  return 0 if ($l =~ m+[[:space:]]*operator+);
  return 0 if ($l =~ m+[[:space:]]*KDE_DEPRECATED[[:space:]]*+);
  return 0 if ($l =~ m+^\s*//+); # only a comment here
  return 0 if ($l =~ m+//.*[Kk]razy:exclude=.*$Prog+);
  return 0 if ($l =~ m+//.*inline+); #if inline in a comment on the line
  return 0 if ($l =~ m+//.*in-line+);#if in-line in a comment on the line

  return 0 if ($l =~ m+virtual\s~+); #allow inline virtual destructors

#  return 0 if ($l =~ m+{\s*}+);
  return 0 if ($l =~ m+^\s*:+);
  return 0 if (&searchBack('[[:space:]]operator+',$lc,2));
  return 0 if (&searchBack('^\s*enum',$lc,2));
  return 0 if (&searchBack('^\s*class',$lc,3));
  return 0 if (&searchBack('^\s*struct',$lc,2));
  return 0 if (&searchBack('^\s*typedef',$lc,2));
  return 0 if (&searchBack('^\s*#define',$lc,5));
  return 0 if (&searchBack('^\s*template',$lc,25));
  print "FOUND inline: $l\n" if ($debug);
  return 1;
}

# search the previous $n lines for a pattern $p
sub searchBack {
  my($p,$l,$n) = @_;
  my($i);
  $n = $#lines if ($#lines < $n);
  for($i=1; $i<=$n; $i++) {
    if ($lines[$l-$i] =~ $p) {
      return 1;
    }
  }
  return 0;
}

# search the previous $n lines for a pattern $p
# but stop if we encounter $s
sub searchBackWithStop {
  my($p,$l,$n,$s) = @_;
  my($i);
  $n = $#lines if ($#lines < $n);
  for($i=1; $i<=$n; $i++) {
    if ($lines[$l-$i] =~ $s) {
      # stop searching
      return 0;
    }
    if ($lines[$l-$i] =~ $p) {
      # got a match
      return 1;
    }
  }
  return 0;
}

sub Help {
  print "Check for inline methods in public classes\n";
  Exit 0 if &helpArg();
}

sub Version {
  print "$Prog, version $Version\n";
  Exit 0 if &versionArg();
}

sub Explain {
  print "For binary compatibility reasons avoid inline methods in public, visible classes. No inline constructors or destructors. Simple getter/setter methods should be re-implemented using d-pointer techniques. See <http://community.kde.org/Policies/Library_Code_Policy#Inline_Code> for more details.\n";
  Exit 0 if &explainArg();
}
