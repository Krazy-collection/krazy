#!/usr/bin/perl -w

eval 'exec /usr/bin/perl -w -S $0 ${1+"$@"}'
    if 0; # not running under some shell
###############################################################################
# Sanity check plugin for the Krazy project.                                  #
# Copyright (C) 2008-2009 by Allen Winter <winter@kde.org>                    #
#                                                                             #
# This program is free software; you can redistribute it and/or modify        #
# it under the terms of the GNU General Public License as published by        #
# the Free Software Foundation; either version 2 of the License, or           #
# (at your option) any later version.                                         #
#                                                                             #
# This program is distributed in the hope that it will be useful,             #
# but WITHOUT ANY WARRANTY; without even the implied warranty of              #
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the                #
# GNU General Public License for more details.                                #
#                                                                             #
# You should have received a copy of the GNU General Public License along     #
# with this program; if not, write to the Free Software Foundation, Inc.,     #
# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.               #
#                                                                             #
###############################################################################

# Tests KDE source for system calls

# Program options:
#   --help:          print one-line help message and exit
#   --version:       print one-line version information and exit
#   --priority:      report issues of the specified priority only
#   --strict:        report issues with the specified strictness level only
#   --explain:       print an explanation with solving instructions
#   --installed      file is to be installed
#   --quiet:         suppress all output messages
#   --verbose:       print the offending content

# Exits with status=0 if test condition is not present in the source;
# else exits with the number of failures encountered.

use strict;
use Cwd 'abs_path';
use FindBin qw($Bin);
use lib "$Bin/../../../../lib";
use Krazy::PreProcess;
use Krazy::Utils;

my($Prog) = "syscalls";
my($Version) = "1.3";

&parseArgs();

&Help() if &helpArg();
&Version() if &versionArg();
&Explain() if &explainArg();
if ($#ARGV != 0){ &Help(); Exit 0; }

my($f) = $ARGV[0];
my($absf) = abs_path($f);

# open file and slurp it in (C++, non-headers only)
if ($f =~ m/\.cpp$/ || $f =~ m/\.cxx$/ || $f =~ m/\.cc$/) {
  open(F, "$f") || die "Couldn't open $f";
} else {
  print "okay\n" if (!&quietArg());
  Exit 0;
}
my(@data_lines) = <F>;
close(F);

# Remove C-style comments and #if 0 blocks from the file input
my(@lines) = RemoveIfZeroBlockC( RemoveCommentsC( @data_lines ) );

my($cnt) = 0;
my($linecnt) = 0;
my($lstr) = "";

my($line);
while ($linecnt < $#lines) {
  $line = $lines[$linecnt++];
  if ($line =~ m+//.*[Kk]razy:excludeall=.*$Prog+ ||
      $line =~ m+//.*[Kk]razy:skip+) {
    $cnt = 0;
    last;
  }
  next if ($line =~ m+//.*[Kk]razy:exclude=.*$Prog+);
  $line =~ s+//.*++;  #skip C++ comments

  &doIt($line,"mkdir","KDE_mkdir");
  &doIt($line,"rename","KDE_rename");
  &doIt($line,"stat","KDE_stat");
  &doIt($line,"lstat","KDE_lstat");
  &doIt($line,"open","KDE_open");
  &doIt($line,"fopen","KDE_fopen");
  &doIt($line,"freopen","KDE_freopen");
  &doIt($line,"fdopen","KDE_fdopen");
  &doIt($line,"fstat","KDE_fstat");
  &doIt($line,"lseek","KDE_lseek");
  &doIt($line,"fseek","KDE_fseek");
  &doIt($line,"ftell","KDE_ftell");
  &doIt($line,"fgetpos","KDE_fgetpos");
  &doIt($line,"fsetpos","KDE_fsetpos");
  &doIt($line,"readdir","KDE_readdir");
  &doIt($line,"sendfile","KDE_sendfile");
  &doIt($line,"signal","KDE_signal");
  &doIt($line,"getenv","qgetenv");

  &doIt2($line,'struct\s*stat[\s\*]',"struct stat","KDE_struct_stat");
  &doIt2($line,'struct\s*dirent[\s\*]',"struct dirent","KDE_struct_dirent");
}

if (!$cnt) {
  print "okay\n" if (!&quietArg());
  Exit 0;
} else {
  $lstr =~ s/,$//;
  print "$lstr ($cnt)\n" if (!&quietArg());
  Exit $cnt;
}

sub doIt() {
  my($line,$syscall,$kname) = @_;
  if (&sysCall($line,$syscall)) {
    $cnt++;
    if ($cnt == 1) {
      $lstr = "line\#" . $linecnt;
    } else {
      $lstr = $lstr . "," . $linecnt;
    }
    $lstr .= " $syscall" . "[$kname]";
    print "=> $line\n" if (&verboseArg());
  }
}

sub doIt2() {
  my($line,$regex,$systype,$kname) = @_;
  if (&sysType($line,$regex)) {
    $cnt++;
    if ($cnt == 1) {
      $lstr = "line\#" . $linecnt;
    } else {
      $lstr = $lstr . "," . $linecnt;
    }
    $lstr .= " $systype" . "[$kname]";
    print "=> $line\n" if (&verboseArg());
  }
}

sub sysCall() {
  my($l,$syscall) = @_;
  if ($l =~ m/[\(,;=:]\s*$syscall[[:space:]]*\(/ ||
      $l =~ m/^\s*$syscall[[:space:]]*\(/) {
    if ($l !~ m/[[:alnum:]]::$syscall/ && $l !~ m/SIGNAL/ && $l !~ m/emit/ &&
	$l !~ m/open.*\"\s*\)/ && $l !~ m/close\s*\(\s*\"/ &&
        $l !~ m/open\s*\(\s*\)/ &&
	$l !~ m/open\s*\(.*[Ff][Aa][Ll][Ss][Ee].*\)/ &&
	$l !~ m/open\s*\(.*[Tt][Rr][Uu][Ee].*\)/ &&
	$l !~ m/close\s*\(.*[Ff][Aa][Ll][Ss][Ee].*\)/ &&
	$l !~ m/close\s*\(.*[Tt][Rr][Uu][Ee].*\)/) {
      return 1;
    }
  } else {
    return 0;
  }
}

sub sysType() {
  my($l,$systype) = @_;
  if ($l =~ m/^\s*$systype/) {
    return 1;
  } else {
    return 0;
  }
}

sub Help {
  print "Check for system calls to replace by KDE or Qt equivalents\n";
  Exit 0 if &helpArg();
}

sub Version {
  print "$Prog, version $Version\n";
  Exit 0 if &versionArg();
}

sub Explain {
  print "Some system calls are not portable, please use the suggested portable wrapper instead. See kde_file.h\n";
  Exit 0 if &explainArg();
}
