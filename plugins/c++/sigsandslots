#!/usr/bin/perl -w

eval 'exec /usr/bin/perl -w -S $0 ${1+"$@"}'
    if 0; # not running under some shell
###############################################################################
# Sanity check plugin for the Krazy project.                                  #
# Copyright (C) 2007 by Allen Winter <winter@kde.org>                         #
#                                                                             #
# This program is free software; you can redistribute it and/or modify        #
# it under the terms of the GNU General Public License as published by        #
# the Free Software Foundation; either version 2 of the License, or           #
# (at your option) any later version.                                         #
#                                                                             #
# This program is distributed in the hope that it will be useful,             #
# but WITHOUT ANY WARRANTY; without even the implied warranty of              #
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the                #
# GNU General Public License for more details.                                #
#                                                                             #
# You should have received a copy of the GNU General Public License along     #
# with this program; if not, write to the Free Software Foundation, Inc.,     #
# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.               #
#                                                                             #
###############################################################################

# Tests KDE source for signals and slots vice Q_SIGNALS and Q_SLOTS

# Program options:
#   --help:          print one-line help message and exit
#   --version:       print one-line version information and exit
#   --explain:       print an explanation with solving instructions, then exit
#   --installed      file is to be installed
#   --quiet:         suppress all output messages
#   --verbose:       print the offending content

# Exits with status=0 if test condition is not present in the source;
# else exits with the number of failures encountered.

use strict;
use Getopt::Long;
use FindBin qw($Bin);
use lib "$Bin/../../../lib";
use Krazy::PreProcess;

my($Prog) = "sigandslots";
my($Version) = "1.2";

my($help) = '';
my($version) = '';
my($explain) = '';
my($installed) = '';
my($quiet) = '';
my($verbose) = '';

exit 1
if (!GetOptions('help' => \$help, 'version' => \$version,
                'explain' => \$explain, 'installed' => \$installed,
                'verbose' => \$verbose, 'quiet' => \$quiet));

&Help() if $help;
&Version() if $version;
&Explain() if $explain;
if ($#ARGV != 0){ &Help(); exit 0; }

my($f) = $ARGV[0];

# open file and slurp it in (skip non-headers)
if ($installed && ($f =~ m/\.h$/ || $f =~ m/\.hxx$/)) {
  open(F, "$f") || die "Couldn't open $f";
} else {
  print "okay\n" if (!$quiet);
  exit 0;
}
my(@data_lines) = <F>;
close(F);

# Remove C-style comments and #if 0 blocks from the file input
my(@lines) = RemoveIfZeroBlockC( RemoveCommentsC( @data_lines ) );

# Check Condition
my($linecnt) = 0;
my($line);
my($sig_cnt) = 0;
my($slot_cnt) = 0;
my($sig_str) = "";
my($slot_str) = "";

while ($linecnt < $#lines) {
  $line = $lines[$linecnt++];
  if ($line =~ m+//.*[Kk]razy:excludeall=.*$Prog+ ||
      $line =~ m+//.*[Kk]razy:skip+) {
    $sig_cnt = $slot_cnt = 0;
    last;
  }

  next if ($line =~ m+//.*[Kk]razy:exclude=.*$Prog+);
  $line =~ s+//.*++;  #skip C++ comments

  if ($line =~ m+[[:space:]]*signals[[:space:]]*:+) {
    next if ($line =~ m+[[:space:]]*k_dcop_signals[[:space:]]*:+);
    $sig_cnt++;
    if ($sig_cnt == 1) {
      $sig_str = "line\#" . $linecnt;
    } else {
      $sig_str = $sig_str . "," . $linecnt;
    }
    print "=> $line\n" if ($verbose);
  }
  if ($line =~ m+[[:space:]]*slots[[:space:]]*:+) {
    $slot_cnt++;
    if ($slot_cnt == 1) {
      $slot_str = "line\#" . $linecnt;
    } else {
      $slot_str = $slot_str . "," . $linecnt;
    }
    print "=> $line\n" if ($verbose);
  }
}

my($total_count) = $sig_cnt + $slot_cnt;
if (!$total_count) {
  print "okay\n" if (!$quiet);
  exit 0;
} else {
  if (!$quiet) {
    print "signals: $sig_str ($sig_cnt)" if ($sig_cnt);
    print ", " if ($sig_cnt && $slot_cnt);
    print "slots: $slot_str ($slot_cnt)" if ($slot_cnt);
    print "\n";
  }
  exit $total_count;
}

sub Help {
  print "Check for signals: and slots:\n";
  exit 0 if $help;
}

sub Version {
  print "$Prog, version $Version\n";
  exit 0 if $version;
}

sub Explain {
  print "In the libraries, use Q_SIGNALS: and Q_SLOTS: instead of signals: and slots: They are syntactically equivalent and should be used to avoid conflicts with boost signals, and with python's use of \"slots\" in its headers.\n";
  exit 0 if $explain;
}
