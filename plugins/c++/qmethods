#!/usr/bin/perl -w

eval 'exec /usr/bin/perl -w -S $0 ${1+"$@"}'
    if 0; # not running under some shell
###############################################################################
# Sanity check plugin for the Krazy project.                                  #
# Copyright (C) 2008-2009 by Allen Winter <winter@kde.org>                    #
#                                                                             #
# This program is free software; you can redistribute it and/or modify        #
# it under the terms of the GNU General Public License as published by        #
# the Free Software Foundation; either version 2 of the License, or           #
# (at your option) any later version.                                         #
#                                                                             #
# This program is distributed in the hope that it will be useful,             #
# but WITHOUT ANY WARRANTY; without even the implied warranty of              #
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the                #
# GNU General Public License for more details.                                #
#                                                                             #
# You should have received a copy of the GNU General Public License along     #
# with this program; if not, write to the Free Software Foundation, Inc.,     #
# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.               #
#                                                                             #
###############################################################################

# Tests KDE source for Qt methods to be avoided.

# Program options:
#   --help:          print one-line help message and exit
#   --version:       print one-line version information and exit
#   --priority:      report issues of the specified priority only
#   --strict:        report issues with the specified strictness level only
#   --explain:       print an explanation with solving instructions
#   --installed      file is to be installed
#   --quiet:         suppress all output messages
#   --verbose:       print the offending content

# Exits with status=0 if test condition is not present in the source;
# else exits with the number of failures encountered.

use strict;
use FindBin qw($Bin);
use lib "$Bin/../../../../lib";
use Krazy::PreProcess;
use Krazy::Utils;

my($Prog) = "qmethods";
my($Version) = "1.7";

&parseArgs();

&Help() if &helpArg();
&Version() if &versionArg();
&Explain() if &explainArg();
if ($#ARGV != 0){ &Help(); exit 0; }

my($f) = $ARGV[0];

# open file and slurp it in (C++, non-headers only)
if ($f =~ m/\.cpp$/ || $f =~ m/\.cxx$/ || $f =~ m/\.cc$/) {
  open(F, "$f") || die "Couldn't open $f";
} else {
  print "okay\n" if (!&quietArg());
  exit 0;
}
my(@data_lines) = <F>;
close(F);

# Remove C-style comments and #if 0 blocks from the file input
my(@lines) = RemoveIfZeroBlockC( RemoveCommentsC( @data_lines ) );

my($cnt) = 0;
my($linecnt) = 0;
my($lstr) = "";

my($line);
while ($linecnt < $#lines) {
  $line = $lines[$linecnt++];
  if ($line =~ m+//.*[Kk]razy:excludeall=.*$Prog+ ||
      $line =~ m+//.*[Kk]razy:skip+) {
    $cnt = 0;
    last;
  }
  next if ($line =~ m+//.*[Kk]razy:exclude=.*$Prog+);
  $line =~ s+//.*++;  #skip C++ comments

  &doIt($line,'QWidget::showFullScreen','showFullScreen\s*\(\s*\)','');
  &doIt($line,'QWidget::showMaximized','showMaximized\s*\(\s*\)','');
  &doIt($line,'QWidget::showMinimized','showMinimized\s*\(\s*\)','');
  &doIt($line,'QWidget::showNormal','showNormal\s*\(\s*\)','');
  &doIt1($line,'QSystemTrayIcon::showMessage','showMessage\s*\(\s*i18','[Ss]tatusBar|KGamePopupItem::|game');
  &doIt($line,'QImage::depth','depth\s*\(\s*\)/','[Pp]ix|desktop|screen|pd-');
#  &doIt2($line,'QTimer::singleShot(0,...)','singleShot\s*\(\s*0\s*,','');
# when we have a real parser, check for the following as well:
# QString::isNull (in almost all cases, QString::isEmpty should be used instead)
}

if (!$cnt) {
  print "okay\n" if (!&quietArg());
  exit 0;
} else {
  $lstr =~ s/,$//;
  print "$lstr ($cnt)\n" if (!&quietArg());
  exit $cnt;
}

sub doIt() {
  my($line,$qname,$regexp,$nregexp) = @_;
  if (&qMethod($line,$regexp,$nregexp)) {
    $cnt++;
    if ($cnt == 1) {
      $lstr = "line\#" . $linecnt;
    } else {
      $lstr = $lstr . "," . $linecnt;
    }
    $lstr .= " $qname";
    print "=> $line\n" if (&verboseArg());
  }
}

#version of doIt() that also searches forward 1 line for the nregexp
sub doIt1() {
  my($line,$qname,$regexp,$nregexp) = @_;

  if (&qMethod($line,$regexp,$nregexp)) {
    if ($lines[$linecnt] !~ m/$nregexp/) {
      $cnt++;
      if ($cnt == 1) {
	$lstr = "line\#" . $linecnt;
      } else {
	$lstr = $lstr . "," . $linecnt;
      }
      $lstr .= " $qname";
      print "=> $line\n" if (&verboseArg());
    }
  }
}

#version of doIt that calls qMethodNoSigsOrSlots
sub doIt2() {
  my($line,$qname,$regexp,$nregexp) = @_;
  if (&qMethodNoSigsOrSlots($line,$regexp,$nregexp)) {
    $cnt++;
    if ($cnt == 1) {
      $lstr = "line\#" . $linecnt;
    } else {
      $lstr = $lstr . "," . $linecnt;
    }
    $lstr .= " $qname";
    print "=> $line\n" if (&verboseArg());
  }
}

sub qMethod() {
  my($l,$regexp,$nregexp) = @_;
  if ($l =~ m/[:\.>\s]$regexp/ &&
      $l !~ m/SIGNAL/ && $l !~ m/SLOT/) {
    if ($nregexp eq "" || $l !~ m/$nregexp/) {
      return 1;
    }
  }
  return 0;
}

#version of qMethod that doesn't fail for SIGNALs and SLOTs
sub qMethodNoSigsOrSlots() {
  my($l,$regexp,$nregexp) = @_;
  if ($l =~ m/[:\.>\s]$regexp/) {
    if ($nregexp eq "" || $l !~ m/$nregexp/) {
      return 1;
    }
  }
  return 0;
}

sub Help {
  print "Check for Qt methods that should be avoided\n";
  exit 0 if &helpArg();
}

sub Version {
  print "$Prog, version $Version\n";
  exit 0 if &versionArg();
}

sub Explain {
  print "A few Qt methods should be avoided because they don't work as expected or because you need to really be an expert to use them correctly. <http://techbase.kde.org/Policies/API_to_Avoid> for more information.\n";
  exit 0 if &explainArg();
}
